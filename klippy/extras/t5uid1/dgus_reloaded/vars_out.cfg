[t5uid1_var line1]
type: output
address: 0x1100
data_type: str
data_len: 26
script: { "{:<26s}".format(get_variable("line1", "")|trim|truncate(24, True)) }

[t5uid1_var line2]
type: output
address: 0x1120
data_type: str
data_len: 26
script: { "{:<26s}".format(get_variable("line2", "")|trim|truncate(24, True)) }

[t5uid1_var line3]
type: output
address: 0x1140
data_type: str
data_len: 26
script: { "{:<26s}".format(get_variable("line3", "")|trim|truncate(24, True)) }

[t5uid1_var line4]
type: output
address: 0x1160
data_type: str
data_len: 26
script: { "{:<26s}".format(get_variable("line4", "")|trim|truncate(24, True)) }

[t5uid1_var message]
type: output
# NB:  1. Must start writing scrolling text content at VP+3 bytes
#      2. Have set this field to Static, anyway, on Priht Status page, (i.e. does not scroll)
#         because is bothersome to see TWO scrolling fields race across the screen...
address: 0x3003
data_type: str
data_len: 26 
script: { "{:<26s}".format(get_variable("message", "")|trim|truncate(26, True)) }

[t5uid1_var status_position_z]
type: output
address: 0x30e6
data_type: int16
script: { (printer.gcode_move.gcode_position.z * 10 ** 1)|round|int }

[t5uid1_var printtime_elapsed]
type: output
address: 0x30e7
data_type: str
data_len: 15
#script: { get_duration(printer.print_stats.print_duration) }
script: { get_duration(printer.t5uid1.print_duration) }

[t5uid1_var status_percent]
type: output
address: 0x30f6
data_type: uint16
script: { printer.t5uid1.print_progress }

[t5uid1_var status_icons]
# Part of Desuuuu UI that is not used in v0.3 or later
type: output
address: 0x30f7
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% if not t5uid1.is_printing %}
    {% do disable_control(t5uid1.pages.print_status,
                          t5uid1.control_types.popup_window,
                          t5uid1.controls.pause) %}
    {% do disable_control(t5uid1.pages.print_status,
                          t5uid1.control_types.popup_window,
                          t5uid1.controls.resume) %}
    { "0" }
  {% elif printer.pause_resume.is_paused %}
    {% do enable_control(t5uid1.pages.print_status,
                         t5uid1.control_types.popup_window,
                         t5uid1.controls.resume) %}
    {% do disable_control(t5uid1.pages.print_status,
                          t5uid1.control_types.popup_window,
                          t5uid1.controls.pause) %}
    { t5uid1.constants.status_icon_resume }
  {% else %}
    {% do enable_control(t5uid1.pages.print_status,
                         t5uid1.control_types.popup_window,
                         t5uid1.controls.pause) %}
    {% do disable_control(t5uid1.pages.print_status,
                          t5uid1.control_types.popup_window,
                          t5uid1.controls.resume) %}
    { t5uid1.constants.status_icon_pause }
  {% endif %}

[t5uid1_var adjust_feedrate]
type: output
address: 0x30f8
data_type: int16
script: { (printer.gcode_move.speed_factor * 100)|round|int }

[t5uid1_var adjust_flowrate]
type: output
address: 0x30f9
data_type: int16
script: { (printer.gcode_move.extrude_factor * 100)|round|int }

[t5uid1_var temp_bed_current]
type: output
address: 0x30fc
data_type: int16
script: { printer.heater_bed.temperature|round|int }

[t5uid1_var temp_bed_target]
type: output
address: 0x30fd
data_type: int16
script: { printer.heater_bed.target|round|int }

[t5uid1_var temp_bed_max]
type: output
address: 0x30fe
data_type: uint16
script: { heater_max_temp("heater_bed", 10)|round|int }

[t5uid1_var temp_h0_current]
type: output
address: 0x30ff
data_type: int16
script: { printer.extruder.temperature|round|int }

[t5uid1_var temp_h0_target]
type: output
address: 0x3100
data_type: int16
script: { printer.extruder.target|round|int }

[t5uid1_var temp_h0_max]
type: output
address: 0x3101
data_type: uint16
script: { heater_max_temp("extruder", 15)|round|int }

[t5uid1_var temp_h1_current]
type: output
address: 0x3102
data_type: int16
script:
  {% if 'extruder1' in printer %}
    { printer.extruder1.temperature|round|int }
  {% else %}
    { "0" }
  {% endif %}

[t5uid1_var temp_h1_target]
type: output
address: 0x3103
data_type: int16
script:
  {% if 'extruder1' in printer %}
    { printer.extruder1.target|round|int }
  {% else %}
    { "0" }
  {% endif %}

[t5uid1_var temp_h1_max]
type: output
address: 0x3104
data_type: uint16
script:
  {% if 'extruder1' in printer %}
    { heater_max_temp("extruder1", 15)|round|int }
  {% else %}
    { "0" }
  {% endif %}

[t5uid1_var stepper_status]
type: output
address: 0x3105
data_type: uint16
script:
  {% if all_steppers_enabled() %}
    { printer.t5uid1.constants.enabled }
  {% else %}
    { printer.t5uid1.constants.disabled }
  {% endif %}

[t5uid1_var level_offset]
type: output
address: 0x3106
data_type: int16
script: { (printer.gcode_move.homing_origin.z * 100)|round|int }

[t5uid1_var level_offset_step_icons]
type: output
address: 0x3107
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% set offset_steps = get_variable("offset_steps",
                                     t5uid1.constants['step_size_0.1']) %}
  {% if offset_steps == t5uid1.constants['step_size_0.1'] %}
    { t5uid1.constants['step_icon_0.1'] }
  {% elif offset_steps == t5uid1.constants['step_size_0.01'] %}
    { t5uid1.constants['step_icon_0.01'] }
  {% else %}
    { "0" }
  {% endif %}

[t5uid1_var level_auto_disable_icon]
type: output
address: 0x3108
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% if 'bed_mesh' in printer and printer.bed_mesh.profile_name != "" %}
    {% do enable_control(t5uid1.pages.leveling_automatic,
                         t5uid1.control_types.return_key_code,
                         t5uid1.controls.disable) %}
    { t5uid1.constants.enabled }
  {% else %}
    {% do disable_control(t5uid1.pages.leveling_automatic,
                          t5uid1.control_types.return_key_code,
                          t5uid1.controls.disable) %}
    { t5uid1.constants.disabled }
  {% endif %}

[t5uid1_var level_auto_grid]
type: output
address: 0x3109
data_type: array[int16]
array_len: 25
script:
  {% if 'bed_mesh' in printer %}
    {% set grid = printer.bed_mesh.probed_matrix %}
  {% endif %}
  {% if grid is not defined or grid|length < 5 %}
    {% set grid = [] %}
    {% for i in range(5) %}
      {% do grid.append([0, 0, 0, 0, 0]) %}
    {% endfor %}
  {% endif %}
  {% for line in grid %}
    {% for val in line %}
      { (val * 1000)|round|int },
    {% endfor %}
  {% endfor %}

[t5uid1_var bed_mesh_profile]
type: output
address: 0x3175
data_type: str
data_len: 26
script: 
  {% if printer['bed_mesh'].profile_name != "" %}
    { printer['bed_mesh'].profile_name }
    {% do set_variable("bed_mesh_profile_value",printer['bed_mesh'].profile_name) %}
  {% else %}
    { "None Loaded" }
  {% endif %}

[t5uid1_var level_probing_icons]
type: output
address: 0x3122
data_type: uint32
script: { probed_matrix() }

[t5uid1_var filament_icons]
type: output
address: 0x3124
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% set extruder = get_variable("filament_extruder",
                                 t5uid1.constants.extruder_current) %}
  {% if extruder == t5uid1.constants.extruder_current %}
    {% if printer.toolhead.extruder == "extruder" %}
      { t5uid1.constants.extruder_icon_e0 }
    {% elif printer.toolhead.extruder == "extruder1" %}
      { t5uid1.constants.extruder_icon_e1 }
    {% else %}
      { "0" }
    {% endif %}
  {% elif extruder == t5uid1.constants.extruder_e0 %}
    { t5uid1.constants.extruder_icon_e0 }
  {% elif extruder == t5uid1.constants.extruder_e1 %}
    { t5uid1.constants.extruder_icon_e1 }
  {% else %}
    { "0" }
  {% endif %}

[t5uid1_var filament_length]
type: output
address: 0x3125
data_type: uint16
script: { get_variable("filament_length", 150) }

[t5uid1_var move_current_x]
type: output
address: 0x3126
data_type: int16
script: { (printer.gcode_move.gcode_position.x * 10)|round|int }

[t5uid1_var move_current_y]
type: output
address: 0x3127
data_type: int16
script: { (printer.gcode_move.gcode_position.y * 10)|round|int }

[t5uid1_var move_current_z]
type: output
address: 0x3128
data_type: int16
script: { (printer.gcode_move.gcode_position.z * 10)|round|int }

[t5uid1_var move_step_icons]
type: output
address: 0x3129
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% set move_steps = get_variable("move_steps",
                                   t5uid1.constants.step_size_10) %}
  {% if move_steps == t5uid1.constants.step_size_10 %}
    { t5uid1.constants.step_icon_10 }
  {% elif move_steps == t5uid1.constants.step_size_1 %}
    { t5uid1.constants.step_icon_1 }
  {% elif move_steps == t5uid1.constants['step_size_0.1'] %}
    { t5uid1.constants['step_icon_0.1'] }
  {% else %}
    { "0" }
  {% endif %}

[t5uid1_var bltouch]
# Not used for CR6 UI
type: output
address: 0x312a
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% if t5uid1.has_bltouch %}
    {% do enable_control(t5uid1.pages.settings_menu2,
                         t5uid1.control_types.return_key_code,
                         t5uid1.controls.extra2) %}
    { t5uid1.constants.enabled }
  {% else %}
    {% do disable_control(t5uid1.pages.settings_menu2,
                          t5uid1.control_types.return_key_code,
                          t5uid1.controls.extra2) %}
    { t5uid1.constants.disabled }
  {% endif %}

[t5uid1_var pid_heater_icons]
type: output
address: 0x312b
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% set pid_heater = get_variable("pid_heater",
                                   t5uid1.constants.heater_h0) %}
  {% if pid_heater == t5uid1.constants.heater_bed %}
    { t5uid1.constants.heater_icon_bed }
  {% elif pid_heater == t5uid1.constants.heater_h0 %}
    { t5uid1.constants.heater_icon_h0 }
  {% elif pid_heater == t5uid1.constants.heater_h1 %}
    { t5uid1.constants.heater_icon_h1 }
  {% else %}
    { "0" }
  {% endif %}

[t5uid1_var pid_temp]
type: output
address: 0x312c
data_type: uint16
script: { get_variable("pid_temp", printer.t5uid1.constants.temp_pla.hotend) }

[t5uid1_var pid_kp]
type: output
address: 0x312d
data_type: int32
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% set pid_heater = get_variable("pid_heater",
                                   t5uid1.constants.heater_h0) %}
  {% if pid_heater == t5uid1.constants.heater_bed %}
    { (pid_param("heater_bed", "p") * 10 ** 2)|round|int }
  {% elif pid_heater == t5uid1.constants.heater_h0 %}
    { (pid_param("extruder", "p") * 10 ** 2)|round|int }
  {% elif pid_heater == t5uid1.constants.heater_h1 %}
    { (pid_param("extruder1", "p") * 10 ** 2)|round|int }
  {% else %}
    { "0" }
  {% endif %}

[t5uid1_var pid_ki]
type: output
address: 0x312f
data_type: int32
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% set pid_heater = get_variable("pid_heater",
                                   t5uid1.constants.heater_h0) %}
  {% if pid_heater == t5uid1.constants.heater_bed %}
    { (pid_param("heater_bed", "i") * 10 ** 2)|round|int }
  {% elif pid_heater == t5uid1.constants.heater_h0 %}
    { (pid_param("extruder", "i") * 10 ** 2)|round|int }
  {% elif pid_heater == t5uid1.constants.heater_h1 %}
    { (pid_param("extruder1", "i") * 10 ** 2)|round|int }
  {% else %}
    { "0" }
  {% endif %}

[t5uid1_var pid_kd]
type: output
address: 0x3131
data_type: int32
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% set pid_heater = get_variable("pid_heater",
                                   t5uid1.constants.heater_h0) %}
  {% if pid_heater == t5uid1.constants.heater_bed %}
    { (pid_param("heater_bed", "d") * 10 ** 2)|round|int }
  {% elif pid_heater == t5uid1.constants.heater_h0 %}
    { (pid_param("extruder", "d") * 10 ** 2)|round|int }
  {% elif pid_heater == t5uid1.constants.heater_h1 %}
    { (pid_param("extruder1", "d") * 10 ** 2)|round|int }
  {% else %}
    { "0" }
  {% endif %}

[t5uid1_var info_machine]
type: output
address: 0x3133
data_type: str
data_len: 24
script: { printer.t5uid1.machine_name }

[t5uid1_var info_build_volume]
type: output
address: 0x314b
data_type: str
data_len: 24
script:
  {% set limits = printer.t5uid1.limits %}
  { "{:d}x{:d}x{:d}".format((limits.x_max - limits.x_min)|round(0, 'floor')|int,
                            (limits.y_max - limits.y_min)|round(0, 'floor')|int,
                            (limits.z_max - limits.z_min)|round(0, 'floor')|int) }

[t5uid1_var info_version]
type: output
address: 0x3163
data_type: str
data_len: 16
script: { printer.t5uid1.version }

[t5uid1_var wait_icons]
type: output
address: 0x31bd
data_type: uint16
script:
  {% set t5uid1 = printer.t5uid1 %}
  {% do disable_control(t5uid1.pages.wait,
                        t5uid1.control_types.popup_window,
                        t5uid1.controls.abort) %}
  {% do disable_control(t5uid1.pages.wait,
                        t5uid1.control_types.return_key_code,
                        t5uid1.controls.continue) %}
  { "0" }

[t5uid1_var file_name]
type: output
# NB: 1. Per DWIN App Dev Guide - Must write text 3 bytes AFTER actual variable pointer!!
#     2. Although DWIN_SET field is left-justified, still don't get first couple of letters unless Right justify in the format instruction??
#     3. Max # of characters that fit on 272-pixel screen = 26
#     4. Max specifiable field length = 32 characters, forced by T5UID1 messaging code, somewhere...
#     TODO: Consider how to split longer filenames into chunks & display on a rotating basis??
address: 0x31C1
data_type: str
data_len: 32
script:
  {% if printer.print_stats.filename %}
    { (printer.print_stats.filename|trim) }
  {% else %}
    {"No name passed by slicer"}    
  {% endif %}

[t5uid1_var tot_duration]
type: output
address: 0x31e0
data_type: str
data_len: 15
script:
  {% if get_duration(printer.print_stats.total_duration) %}
    { get_duration(printer.print_stats.total_duration) }
  {% else %}
    {"Not working"}    
  {% endif %}

[t5uid1_var status_remaining]
type: output
address: 0x4030
data_type: str
data_len: 15
script: { get_remaining(printer.t5uid1.time_remaining) }

[t5uid1_var fan_speed]
type: output
address: 0x4000
data_type: uint16
script:
  {% if 'fan' in printer %}
    { (printer.fan.speed * 100)|round|int }
  {% else %}
    { "0" }
  {% endif %}

[t5uid1_var LED_State]
type: output
address: 0x4001
data_type: uint16
script:
  { (printer["output_pin hotend_LED"].value)|int }

[t5uid1_var RunoutSensor_State]
type: output
address: 0x4002
data_type: uint16
script: 
  { (printer["filament_switch_sensor RunoutSensor"].enabled)|int }

[t5uid1_var print_this_file]
type: output
address: 0x4007
data_type: str
data_len: 32
script: 
  {% set scroll_index = get_variable("scroll_index") %}
  {% set print_this_file = specific_fpname(2, scroll_index)|trim %}
  {% do set_variable("print_file_name", print_this_file)  %}
  { (print_this_file) }

[t5uid1_var volume]
type: output
address: 0x4027
data_type: uint16
script: { printer.t5uid1.volume }

[t5uid1_var brightness]
type: output
address: 0x4028
data_type: uint16
script: { printer.t5uid1.brightness }

[t5uid1_var filelist_posn1]
type: output
address: 0x4053
data_type: str
data_len: 32
script:
    {% set scroll_index = get_variable("scroll_index") %}
    { (specific_fpname(0, scroll_index)|trim) }

[t5uid1_var filelist_posn2]
type: output
address: 0x4073
data_type: str
data_len: 32
script:  
    {% set scroll_index = get_variable("scroll_index") %}
    { (specific_fpname(1, scroll_index)|trim) }


[t5uid1_var filelist_posn3]
type: output
address: 0x4093
data_type: str
data_len: 32
script:
    {% set scroll_index = get_variable("scroll_index") %}
    { (specific_fpname(2, scroll_index)|trim) }

[t5uid1_var filelist_posn4]
type: output
address: 0x40B3
data_type: str
data_len: 32
script:
    {% set scroll_index = get_variable("scroll_index") %}
    { (specific_fpname(3, scroll_index)|trim) }


[t5uid1_var filelist_posn5]
type: output
address: 0x40D3
data_type: str
data_len: 32
script:
    {% set scroll_index = get_variable("scroll_index") %}
    { (specific_fpname(4, scroll_index)|trim) }
      
